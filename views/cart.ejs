<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Cart - Friends Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4e73df;
            --secondary-color: #f8f9fc;
            --accent-color: #2e59d9;
        }
        
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .navbar {
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%) !important;
        }
        
        .user-profile-card {
            border-radius: 15px;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
            transition: all 0.3s;
            border: none;
            background: linear-gradient(to right, #ffffff, #f8f9fc);
        }
        
        .user-profile-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.15);
        }
        
        .cart-container {
            border-radius: 15px;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
            background: white;
            overflow: hidden;
        }
        
        .cart-item {
            transition: all 0.3s;
            border-bottom: 1px solid #eee;
        }
        
        .cart-item:hover {
            background-color: rgba(78, 115, 223, 0.05);
            transform: translateX(5px);
        }
        
        .cart-item-img {
            width: 100px;
            height: 100px;
            object-fit: contain;
            border-radius: 10px;
            transition: all 0.3s;
        }
        
        .cart-item-img:hover {
            transform: scale(1.05);
        }
        
        .quantity-input {
            width: 60px;
            text-align: center;
            border-radius: 5px;
            border: 1px solid #ced4da;
        }
        
        .btn-friends {
            background-color: var(--primary-color);
            color: white;
            border: none;
            transition: all 0.3s;
        }
        
        .btn-friends:hover {
            background-color: var(--accent-color);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .empty-cart {
            height: 300px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
        }
        
        .empty-cart-icon {
            font-size: 5rem;
            color: #ddd;
            margin-bottom: 20px;
            animation: bounce 2s infinite;
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {transform: translateY(0);}
            40% {transform: translateY(-20px);}
            60% {transform: translateY(-10px);}
        }
        
        .total-section {
            background-color: var(--secondary-color);
            border-radius: 10px;
            padding: 20px;
        }
        
        .pulse-animation {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% {box-shadow: 0 0 0 0 rgba(78, 115, 223, 0.4);}
            70% {box-shadow: 0 0 0 10px rgba(78, 115, 223, 0);}
            100% {box-shadow: 0 0 0 0 rgba(78, 115, 223, 0);}
        }
        
        .swal2-popup {
            border-radius: 15px !important;
            box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.2) !important;
        }

        .swal2-confirm {
            background-color: var(--primary-color) !important;
            border: none !important;
            transition: all 0.3s !important;
        }

        .swal2-confirm:hover {
            background-color: var(--accent-color) !important;
            transform: translateY(-2px) !important;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1) !important;
        }

        .animate__animated {
            --animate-duration: 0.5s;
        }

        @keyframes slideIn {
            from {
                transform: translateY(20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .cart-item {
            animation: slideIn 0.5s ease-out forwards;
        }

        .buy-all-summary {
            padding: 1rem;
        }

        .summary-icon {
            animation: bounce 2s infinite;
        }

        .summary-details {
            max-height: 400px;
            overflow-y: auto;
        }

        .swal2-popup {
            width: 32em !important;
            padding: 2em !important;
        }

        .badge {
            font-size: 1rem;
            padding: 0.5rem 1rem;
        }

        .card {
            border: none;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
        }

        .card-body {
            padding: 1.5rem;
        }

        .btn-success {
            background-color: #28a745;
            border: none;
            transition: all 0.3s;
        }

        .btn-success:hover {
            background-color: #218838;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .buy-item-summary {
            padding: 1rem;
            text-align: center;
        }

        .summary-icon {
            color: #28a745;
            animation: bounce 1s infinite;
        }
        
        .coupon-success {
            color: #28a745;
            font-weight: bold;
        }
        
        .coupon-error {
            color: #dc3545;
            font-weight: bold;
        }
        
        .edit-profile-modal .modal-content {
            border-radius: 15px;
            border: none;
            box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.1);
        }
        
        .edit-profile-modal .modal-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);
            color: white;
            border-radius: 15px 15px 0 0;
        }
        
        .edit-profile-modal .btn-close {
            filter: invert(1);
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark mb-4">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/main_page">
                <i class="fas fa-shopping-cart me-2"></i>Friends Cart
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3 d-none d-md-block">
                    <i class="fas fa-user-circle me-1"></i> <%= user.fullName %>
                </span>
                <a class="btn btn-outline-light me-2" href="/main_page">
                    <i class="fas fa-home me-1"></i> Home
                </a>
                <a class="btn btn-danger" href="/logout">
                    <i class="fas fa-sign-out-alt me-1"></i> Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="container mb-5">
        <!-- User Profile Card -->
        <div class="card user-profile-card mb-4 animate__animated animate__fadeIn">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h4 class="card-title text-primary">
                            <i class="fas fa-user-circle me-2"></i>Your Profile Details
                        </h4>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <p><strong><i class="fas fa-user me-2"></i>Name:</strong> <%= user.fullName %></p>
                                <p><strong><i class="fas fa-envelope me-2"></i>Email:</strong> <%= user.email %></p>
                            </div>
                            <div class="col-md-6">
                                <p><strong><i class="fas fa-phone me-2"></i>Phone:</strong> <%= user.phone %></p>
                                <p><strong><i class="fas fa-map-marker-alt me-2"></i>Address:</strong> <%= user.address %></p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 d-flex align-items-center justify-content-end">
                        <button class="btn btn-friends btn-lg" data-bs-toggle="modal" data-bs-target="#editProfileModal">
                            <i class="fas fa-edit me-2"></i>Edit Profile
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <h2 class="mb-4 animate__animated animate__fadeIn">
            <i class="fas fa-shopping-cart me-2"></i>Your Shopping Cart
        </h2>
        
        <% if (cartItems.length === 0) { %>
            <div class="empty-cart animate__animated animate__fadeIn">
                <div class="empty-cart-icon">
                    <i class="fas fa-cart-arrow-down"></i>
                </div>
                <h3 class="text-muted mb-3">Your cart is empty</h3>
                <p class="text-muted mb-4">Looks like you haven't added any items yet</p>
                <a href="/main_page" class="btn btn-friends btn-lg">
                    <i class="fas fa-shopping-bag me-2"></i>Start Shopping
                </a>
            </div>
        <% } else { %>
            <div class="cart-container animate__animated animate__fadeInUp">
                <div class="table-responsive">
                    <table class="table mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 40%">Product</th>
                                <th style="width: 15%">Price</th>
                                <th style="width: 20%">Quantity</th>
                                <th style="width: 15%">Total</th>
                                <th style="width: 10%">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cartItems.forEach(item => { 
                                const price = parseFloat(item.productPrice.replace(/[^0-9.-]+/g, ""));
                                const itemTotal = price * item.quantity;
                            %>
                                <tr class="cart-item animate__animated animate__fadeIn">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="<%= item.productImage %>" alt="<%= item.productTitle %>" 
                                                class="cart-item-img me-3 shadow-sm">
                                            <div>
                                                <h6 class="mb-1"><%= item.productTitle %></h6>
                                                <small class="text-muted">Item ID: <%= item._id.toString().slice(-6) %></small>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="align-middle"><%= item.productPrice %></td>
                                    <td class="align-middle">
                                        <div class="d-flex align-items-center quantity-controls">
                                            <button type="button" class="btn btn-sm btn-outline-secondary minus-btn">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <input type="number" name="quantity" value="<%= item.quantity %>" 
                                                min="1" class="form-control quantity-input mx-2" 
                                                data-item-id="<%= item._id %>" style="width: 60px;">
                                            <button type="button" class="btn btn-sm btn-outline-secondary plus-btn">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </td>
                                    <td class="align-middle fw-bold">₹<%= itemTotal.toFixed(2) %></td>
                                    <td class="align-middle">
                                        <div class="btn-group">
                                            <button onclick="removeCartItem('<%= item._id %>')" class="btn btn-sm btn-outline-danger me-2">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                            <button onclick="buyItem('<%= item._id %>')" class="btn btn-sm btn-success">
                                                <i class="fas fa-shopping-bag"></i> Buy
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
                
                <div class="p-4 bg-light">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="input-group mb-3">
                                <input type="text" id="couponCode" class="form-control" placeholder="Coupon code">
                                <button class="btn btn-friends" type="button" onclick="applyCoupon()">Apply</button>
                            </div>
                            <div id="couponMessage" class="mb-3"></div>
                        </div>
                        <div class="col-md-6">
                            <div class="total-section float-md-end">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Subtotal:</span>
                                    <span id="subtotal">₹<%= total %></span>
                                </div>
                                <div class="d-flex justify-content-between mb-3">
                                    <span>Shipping:</span>
                                    <span id="shipping" class="text-success">FREE</span>
                                </div>
                                <div class="d-flex justify-content-between mb-3" id="discountRow" style="display: none;">
                                    <span>Discount:</span>
                                    <span id="discount" class="text-danger">-₹0.00</span>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between">
                                    <h5>Total:</h5>
                                    <h5 id="grandTotal" class="text-primary">₹<%= total %></h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-between mt-4 animate__animated animate__fadeIn">
                <a href="/main_page" class="btn btn-outline-secondary btn-lg">
                    <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                </a>
                <div>
                    <button onclick="showBuyAllConfirmation()" class="btn btn-success btn-lg">
                        <i class="fas fa-bolt me-2"></i>Buy All
                    </button>
                </div>
            </div>
        <% } %>
    </div>

    <!-- Edit Profile Modal -->
    <div class="modal fade edit-profile-modal" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProfileForm">
                        <div class="mb-3">
                            <label for="editFullName" class="form-label">Full Name</label>
                            <input type="text" class="form-control" id="editFullName" value="<%= user.fullName %>" required>
                        </div>
                        <div class="mb-3">
                            <label for="editEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="editEmail" value="<%= user.email %>" required>
                        </div>
                        <div class="mb-3">
                            <label for="editPhone" class="form-label">Phone</label>
                            <input type="tel" class="form-control" id="editPhone" value="<%= user.phone %>" required>
                        </div>
                        <div class="mb-3">
                            <label for="editAddress" class="form-label">Address</label>
                            <textarea class="form-control" id="editAddress" rows="3" required><%= user.address %></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-friends" onclick="updateProfile()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
        // Coupon codes and their discounts
        const couponCodes = {
            'FRIENDS10': 10,    // 10% discount
            'WELCOME20': 20,    // 20% discount
            'SAVE50': 50        // 50% discount (for testing)
        };
        
        let appliedCoupon = null;
        let originalTotal = parseFloat('<%= total %>');
        
        function applyCoupon() {
            const couponCode = document.getElementById('couponCode').value.trim().toUpperCase();
            const couponMessage = document.getElementById('couponMessage');
            
            if (!couponCode) {
                couponMessage.innerHTML = '<span class="coupon-error">Please enter a coupon code</span>';
                return;
            }
            
            if (appliedCoupon === couponCode) {
                couponMessage.innerHTML = '<span class="coupon-error">This coupon is already applied</span>';
                return;
            }
            
            if (couponCodes[couponCode]) {
                appliedCoupon = couponCode;
                const discountPercent = couponCodes[couponCode];
                const discountAmount = (originalTotal * discountPercent / 100).toFixed(2);
                const newTotal = (originalTotal - discountAmount).toFixed(2);
                
                // Update UI
                document.getElementById('discount').textContent = `-₹${discountAmount}`;
                document.getElementById('discountRow').style.display = 'flex';
                document.getElementById('grandTotal').textContent = `₹${newTotal}`;
                
                couponMessage.innerHTML = `<span class="coupon-success">Coupon applied! ${discountPercent}% discount</span>`;
            } else {
                couponMessage.innerHTML = '<span class="coupon-error">Invalid coupon code</span>';
            }
        }
        
        function removeCoupon() {
            appliedCoupon = null;
            document.getElementById('discountRow').style.display = 'none';
            document.getElementById('grandTotal').textContent = `₹${originalTotal.toFixed(2)}`;
            document.getElementById('couponMessage').innerHTML = '';
            document.getElementById('couponCode').value = '';
        }
        
        function updateProfile() {
            const fullName = document.getElementById('editFullName').value;
            const email = document.getElementById('editEmail').value;
            const phone = document.getElementById('editPhone').value;
            const address = document.getElementById('editAddress').value;
            
            fetch('/update-profile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    fullName,
                    email,
                    phone,
                    address
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Profile updated successfully',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to update profile',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to update profile',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
        }
        
        // Replace the existing showBuyAllConfirmation function with this:
async function showBuyAllConfirmation() {
    try {
        const response = await fetch('/cart-data');
        const data = await response.json();
        
        if (!data.cartItems || data.cartItems.length === 0) {
            Swal.fire('Error', 'Your cart is empty', 'error');
            return;
        }

        const total = appliedCoupon ? 
            (originalTotal - (originalTotal * couponCodes[appliedCoupon] / 100)).toFixed(2) : 
            originalTotal.toFixed(2);

        const result = await Swal.fire({
            title: 'Confirm Purchase',
            html: `
                <div class="buy-all-summary">
                    <div class="summary-icon mb-4">
                        <i class="fas fa-shopping-bag fa-3x text-success"></i>
                    </div>
                    <div class="summary-details">
                        <h5 class="mb-4">Order Summary</h5>
                        <div class="card">
                            <div class="card-body">
                                ${data.cartItems.map(item => `
                                    <div class="d-flex justify-content-between mb-2">
                                        <small>${item.productTitle} × ${item.quantity}</small>
                                        <small>₹${(parseFloat(item.productPrice.replace(/[^0-9.-]+/g, "")) * item.quantity).toFixed(2)}</small>
                                    </div>
                                `).join('')}
                                <hr>
                                <div class="d-flex justify-content-between">
                                    <strong>Total Amount:</strong>
                                    <strong class="text-success">₹${total}</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Proceed to Buy',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#dc3545'
        });

        if (result.isConfirmed) {
            const loadingResult = await Swal.fire({
                title: 'Processing',
                html: 'Preparing your order...',
                timer: 2000,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const clearResponse = await fetch('/clear-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const clearData = await clearResponse.json();
            
            if (clearData.success) {
                window.location.href = '/buy_page';
            } else {
                throw new Error('Failed to process order');
            }
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'Failed to process order', 'error');
    }
}
        function buyItem(itemId) {
            Swal.fire({
                title: 'Confirm Purchase',
                html: `
                    <div class="buy-item-summary">
                        <div class="summary-icon mb-3">
                            <i class="fas fa-shopping-bag fa-2x text-success"></i>
                        </div>
                        <p>Are you sure you want to buy this item?</p>
                    </div>
                `,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, buy now',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#dc3545'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/buy-single-item/${itemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '/buy_page';
                        } else {
                            throw new Error('Failed to process purchase');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to process purchase'
                        });
                    });
                }
            });
        }
        
        function removeCartItem(itemId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it!',
                background: 'white',
                backdrop: `
                    rgba(78, 115, 223, 0.4)
                    url("/images/nyan-cat.gif")
                    left top
                    no-repeat
                `
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/remove-cart-item/${itemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: data.message,
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1500,
                                timerProgressBar: true,
                                willClose: () => {
                                    refreshCart();
                                }
                            });
                        } else {
                            Swal.fire('Error', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error', 'Failed to remove item', 'error');
                    });
                }
            });
        }
        
       
        
        // Replace the existing DOMContentLoaded event listener with this:
document.addEventListener('DOMContentLoaded', function() {
    const quantityControls = document.querySelectorAll('.quantity-controls');
    
    quantityControls.forEach(control => {
        const input = control.querySelector('.quantity-input');
        const minusBtn = control.querySelector('.minus-btn');
        const plusBtn = control.querySelector('.plus-btn');
        const itemId = input.dataset.itemId;
        
        minusBtn.addEventListener('click', async () => {
            const currentValue = parseInt(input.value);
            if (currentValue > 1) {
                input.value = currentValue - 1;
                await updateQuantityDynamic(itemId, currentValue - 1);
            }
        });
        
        plusBtn.addEventListener('click', async () => {
            const currentValue = parseInt(input.value);
            input.value = currentValue + 1;
            await updateQuantityDynamic(itemId, currentValue + 1);
        });
        
        input.addEventListener('change', async () => {
            let value = parseInt(input.value);
            if (isNaN(value) || value < 1) value = 1;
            input.value = value;
            await updateQuantityDynamic(itemId, value);
        });
    });
});
// Replace the existing updateQuantityDynamic function with this:
async function updateQuantityDynamic(itemId, quantity) {
    try {
        const response = await fetch(`/update-cart-item/${itemId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ quantity: quantity })
        });

        const data = await response.json();
        
        if (data.success) {
            // Update item row
            const row = document.querySelector(`input[data-item-id="${itemId}"]`).closest('tr');
            const priceText = row.querySelector('td:nth-child(2)').textContent;
            const price = parseFloat(priceText.replace(/[^0-9.-]+/g, ""));
            const newTotal = price * quantity;
            
            // Update item total
            row.querySelector('td:nth-child(4)').textContent = `₹${newTotal.toFixed(2)}`;
            
            // Update cart totals
            originalTotal = parseFloat(data.total);
            document.getElementById('subtotal').textContent = `₹${data.total}`;
            document.getElementById('grandTotal').textContent = `₹${data.total}`;
            
            if (appliedCoupon) {
                const discountPercent = couponCodes[appliedCoupon];
                const discountAmount = (originalTotal * discountPercent / 100).toFixed(2);
                const discountedTotal = (originalTotal - discountAmount).toFixed(2);
                document.getElementById('discount').textContent = `-₹${discountAmount}`;
                document.getElementById('grandTotal').textContent = `₹${discountedTotal}`;
            }

            // Show success notification
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 1000,
                timerProgressBar: true
            });

            Toast.fire({
                icon: 'success',
                title: 'Quantity updated'
            });
        } else {
            throw new Error(data.message || 'Failed to update quantity');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update quantity',
            timer: 2000,
            showConfirmButton: false
        });
    }
}
        
        function updateCartTotals() {
            document.getElementById('subtotal').textContent = `₹${originalTotal.toFixed(2)}`;
            
            if (appliedCoupon) {
                const discountPercent = couponCodes[appliedCoupon];
                const discountAmount = (originalTotal * discountPercent / 100).toFixed(2);
                const newTotal = (originalTotal - discountAmount).toFixed(2);
                
                document.getElementById('discount').textContent = `-₹${discountAmount}`;
                document.getElementById('grandTotal').textContent = `₹${newTotal}`;
            } else {
                document.getElementById('grandTotal').textContent = `₹${originalTotal.toFixed(2)}`;
            }
        }

        function refreshCart() {
    fetch('/cart-data')
        .then(response => response.json())
        .then(data => {
            if (data.cartItems.length === 0) {
                // If cart is empty, reload the page to show empty cart message
                window.location.reload();
            } else {
                updateCartTable(data.cartItems, data.total);
            }
        })
        .catch(error => {
            console.error('Error refreshing cart:', error);
            Swal.fire('Error', 'Failed to refresh cart', 'error');
        });
}

function updateCartTable(cartItems, total) {
    const tbody = document.querySelector('tbody');
    tbody.innerHTML = '';  // Clear existing rows
    
    cartItems.forEach(item => {
        const price = parseFloat(item.productPrice.replace(/[^0-9.-]+/g, ""));
        const itemTotal = price * item.quantity;
        
        const row = `
            <tr class="cart-item animate__animated animate__fadeIn">
                <td>
                    <div class="d-flex align-items-center">
                        <img src="${item.productImage}" alt="${item.productTitle}" 
                            class="cart-item-img me-3 shadow-sm">
                        <div>
                            <h6 class="mb-1">${item.productTitle}</h6>
                            <small class="text-muted">Item ID: ${item._id.toString().slice(-6)}</small>
                        </div>
                    </div>
                </td>
                <td class="align-middle">${item.productPrice}</td>
                <td class="align-middle">
                    <div class="d-flex align-items-center quantity-controls">
                        <button type="button" class="btn btn-sm btn-outline-secondary minus-btn">
                            <i class="fas fa-minus"></i>
                        </button>
                        <input type="number" name="quantity" value="${item.quantity}" 
                            min="1" class="form-control quantity-input mx-2" 
                            data-item-id="${item._id}" style="width: 60px;">
                        <button type="button" class="btn btn-sm btn-outline-secondary plus-btn">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </td>
                <td class="align-middle fw-bold">₹${itemTotal.toFixed(2)}</td>
                <td class="align-middle">
                    <div class="btn-group">
                        <button onclick="removeCartItem('${item._id}')" class="btn btn-sm btn-outline-danger me-2">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                        <button onclick="buyItem('${item._id}')" class="btn btn-sm btn-success">
                            <i class="fas fa-shopping-bag"></i> Buy
                        </button>
                    </div>
                </td>
            </tr>
        `;
        tbody.insertAdjacentHTML('beforeend', row);
    });

    // Update totals
    originalTotal = parseFloat(total);
    document.getElementById('subtotal').textContent = `₹${total}`;
    document.getElementById('grandTotal').textContent = `₹${total}`;
    
    // Reapply coupon if one was active
    if (appliedCoupon) {
        applyCoupon();
    }

    // Reinitialize quantity controls
    initializeQuantityControls();
}

function initializeQuantityControls() {
    const quantityControls = document.querySelectorAll('.quantity-controls');
    
    quantityControls.forEach(control => {
        const input = control.querySelector('.quantity-input');
        const minusBtn = control.querySelector('.minus-btn');
        const plusBtn = control.querySelector('.plus-btn');
        const itemId = input.dataset.itemId;
        
        minusBtn.addEventListener('click', () => {
            const currentValue = parseInt(input.value);
            if (currentValue > 1) {
                input.value = currentValue - 1;
                updateQuantityDynamic(itemId, currentValue - 1);
            }
        });
        
        plusBtn.addEventListener('click', () => {
            const currentValue = parseInt(input.value);
            input.value = currentValue + 1;
            updateQuantityDynamic(itemId, currentValue + 1);
        });
        
        input.addEventListener('change', () => {
            let value = parseInt(input.value);
            if (isNaN(value) || value < 1) value = 1;
            input.value = value;
            updateQuantityDynamic(itemId, value);
        });
    });
}
    </script>
</body>
</html>